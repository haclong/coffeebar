Continuons le traitement de notre commande. Après la soumission du formulaire PlaceOrderForm, on récupère un objet OrderModel qui est composé d'une propriété $id (le numéro de la table) et d'un array $items (les éléments de la commande). Il va nous falloir assainir ces données et les stocker dans un objet PlaceOrder composé d'un id unique (guid) et d'un objet OrderedItems.

Grâce au service OpenTabs, on va pouvoir retrouver, à partir du numéro de la table, l'id unique de la note.

// module/CoffeeBar/src/CoffeeBar/Service/OpenTabs.php
<?php
namespace CoffeeBar\Service ;
class OpenTabs
{
    /**
     * Retourne l'id de la table
     * @param int $table - Numéro de la table
     * @return id
     */
    public function tabIdForTable($table)
    {
        $this->loadTodoByTab() ;
        foreach($this->todoByTab->getArrayCopy() as $k => $v)
        {
            // $v = CoffeeBar\Entity\OpenTabs\Tab
            if($v->getTableNumber() == $table)
            {
                return $k ;
            }
        }
        return NULL ;
    }
}

Ainsi, dans le controleur

Le Controleur

// module/CoffeeBar/src/CoffeeBar/Controller/TabController.php
<?php
namespace CoffeeBar\Controller ;
use CoffeeBar\Entity\TabStory\OrderModel;
use Zend\Mvc\Controller\AbstractActionController;
class TabController extends AbstractActionController
{
    public function orderAction()
    {
        // utiliser la clé déclarée dans le Service Manager (classe Module)
        $form = $this->serviceLocator->get('PlaceOrderForm') ;
        $request = $this->getRequest() ;

        // vérifier si on connait le numéro de la table pour laquelle on passe commande
        if ($id = (int) $this->params()->fromRoute('id')) {
            $form->get('id')->setValue($id) ;
        // sinon, vérifier si le formulaire a été posté
        } elseif($request->isPost()) {
            $form->setData($request->getPost()) ;
            if($form->isValid()) {
                $orderModel = $form->getObject() ; // CoffeeBar\Entity\TabStory\OrderModel
                $tableNumber = $orderModel->getId() ;
                // on charge le service CoffeeBar\Service\OpenTabs
                $openTabs = $this->serviceLocator->get('OpenTabs') ;
                // on instancie l'objet CoffeeBar\Command\PlaceOrder
                $placeOrder = $this->serviceLocator->get('PlaceOrderCommand') ;
                // on crée notre objet OrderedItems à partir de l'objet OrderModel
                $items = $this->assignOrderedItems($orderModel) ;
                // l'appel à la méthode PlaceOrder::placeOrder va déclencher un événement placeOrder
                // PlacerOrder::placeOrder(guid, OrderedItems)
                $placeOrder->placeOrder($openTabs->tabIdForTable($tableNumber), $items) ;
                return $this->redirect()->toRoute('tab/status', array('id' => $tableNumber));
            }
        // si on ne sait pas pour quelle table on va passer commande, retourner à la page 'Ouvrir une commande'
        } else {
            return $this->redirect()->toRoute('tab/open');
        }
        
        $result['form'] = $form ;
        return array('result' => $result) ;
    }

    protected function assignOrderedItems(OrderModel $model)
    {
        $items = $this->serviceLocator->get('OrderedItems') ;
        $menu = $this->serviceLocator->get('CoffeeBarEntity\MenuItems') ;
        foreach($model->getItems() as $item)
        {
            for($i = 0; $i < $item->getNumber(); $i++)
            {
                $orderedItem = clone $this->serviceLocator->get('OrderedItem') ;
                $orderedItem->setId($item->getId()) ;
                $orderedItem->setDescription($menu->getById($item->getId())->getDescription()) ;
                $orderedItem->setPrice($menu->getById($item->getId())->getPrice()) ;
                $orderedItem->setIsDrink($menu->getById($item->getId())->getIsDrink()) ;
                $items->offsetSet(NULL, $orderedItem) ;
            }
        }
        return $items ;
    }
}

Et voila, dans le controleur, en un tour de passe passe, on tranforme un objet OrderModel (numéro de la table, array(OrderItem)) en un objet PlaceOrder(guid de la note, OrderedItems).

Dans le Service Manager

// module/CoffeeBar/Module.php
<?php
namespace CoffeeBar;
class Module
{
    public function getServiceConfig()
    {
        return array(
            'invokables' => array(
                'CoffeeBarEntity\MenuItems' => 'CoffeeBar\Entity\MenuItems',
                'OrderedItems' => 'CoffeeBar\Entity\TabStory\OrderedItems',
                'OrderedItem' => 'CoffeeBar\Entity\TabStory\OrderedItem',
            ),
            'factories' => array(
                // formulaire OpenTabForm avec l'instruction setObject()
                'PlaceOrderCommand' => function($sm) {
                    $events = $sm->get('TabEventManager') ;
                    $placeOrder = new PlaceOrder() ;
                    $placeOrder->setEventManager($events) ;
                    return $placeOrder ;
                },
            ),
        ) ;
    }
}

Après PlaceOrder

Si vous vous rappelez, dans CoffeeBar\Service\TabAggregate, lorsqu'il y a un événement PlaceOrder, on déclenche un événement DrinksOrdered et un autre événement FoodOrdered.

Si ces deux événements sont déjà gérés dans l'aggrégat, voyons ce qu'il se passe dans le service OpenTabs.

// module/CoffeeBar/src/CoffeeBar/Service/OpenTabs.php
<?php
namespace CoffeeBar\Service ;
class OpenTabs implements ListenerAggregateInterface
{
    public function attach(EventManagerInterface $events)
    {
        $this->listeners[] = $events->attach('drinksOrdered', array($this, 'onDrinksOrdered')) ;
        $this->listeners[] = $events->attach('foodOrdered', array($this, 'onFoodOrdered')) ;
    }

    public function onDrinksOrdered($events)
    {
        $drinksOrdered = $events->getParam('drinksOrdered') ;

        // on charge l'objet TodoByTab (ArrayObject) du cache
        $this->loadTodoByTab() ;
        // on récupère l'objet Tab identifié par l'id unique
        $tab = $this->getTab($drinksOrdered->getId()) ;
        
        foreach($drinksOrdered->getItems() as $drink)
        {  
            // on crée un nouvel objet TabItem pour chaque boisson commandée
            $item = new TabItem($drink->getId(), $drink->getDescription(), $drink->getPrice()) ;
            // on ajoute ce TabItem à la liste des ItemsToServe (ArrayObject) de la note courante
            $tab->getItemsToServe()->addItem($item) ;
        }
        // on stocke sur le même index (id unique) l'objet Tab mis à jour avec les nouveaux éléments
        $this->todoByTab->offsetSet($drinksOrdered->getId(), $tab) ;
        $this->saveTodoByTab() ;
    }

    /**
     * Listener add food ordered tab content
     * @param Events $events
     */
    public function onFoodOrdered($events)
    {
        $foodOrdered = $events->getParam('foodOrdered') ;

        // on charge l'objet TodoByTab (ArrayObject) du cache
        $this->loadTodoByTab() ;
        // on récupère l'objet Tab identifié par l'id unique
        $tab = $this->getTab($foodOrdered->getId()) ;
        
        foreach($foodOrdered->getItems() as $food)
        {
            // on crée un nouvel objet TabItem pour chaque plat commandée
            $item = new TabItem($food->getId(), $food->getDescription(), $food->getPrice()) ;
            // on ajoute ce TabItem à la liste des ItemsInPreparation (ArrayObject) de la note courante
            $tab->getItemsInPreparation()->addItem($item) ;
        }
        
        // on stocke sur le même index (id unique) l'objet Tab mis à jour avec les nouveaux éléments
        $this->todoByTab->offsetSet($foodOrdered->getId(), $tab) ;
        $this->saveTodoByTab() ;
    }

    protected function getTab($guid)
    {
        $this->loadTodoByTab() ;
        return $this->todoByTab->offsetGet($guid) ;
    }
}

Ainsi, les boissons sont ajoutées dans la liste des éléments à servir alors que les plats sont ajoutés à la liste des éléments à préparer.

Voyons l'objet TabItem

// module/CoffeeBar/src/CoffeeBar/Entity/OpenTabs/TabItem.php
<?php
namespace CoffeeBar\Entity\OpenTabs ;
class TabItem
{
    protected $menuNumber; // int - id de l'élément du menu
    protected $description; // string - descriptif du menu
    protected $price; // float - prix
    
    public function __construct($menuNumber, $description, $price)
    {
        $this->setMenuNumber($menuNumber) ;
        $this->setDescription($description) ;
        $this->setPrice($price) ;
    }
}

Et voyons comment on ajoute des éléments TabItem aux items en préparation ou aux items à servir

// module/CoffeeBar/src/CoffeeBar/Entity/OpenTabs/ItemsArray.php
<?php
namespace CoffeeBar\Entity\OpenTabs ;
use ArrayObject;
class ItemsArray extends ArrayObject 
{
    public function addItem($item)
    {
        $this->offsetSet(NULL, $item) ;
    }
}
