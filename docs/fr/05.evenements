Après avoir créer le formulaire, nous allons entrer dans notre logique métier.

NOTE : le long du tutoriel, je vais vous faire rééditer des classes et des vues sur lesquels on sera déjà passé. Il va y avoir des parties qui auront disparu au second passage : typiquement les use, les instructions extends, implements etc... Cela ne veut pas dire qu'il faut les retirer. C'est juste pour alléger le code. S'il faut retirer du code, soit je vous remettrais le passage intégralement, pour voir ce qui a disparu, soit je vous signalerais qu'il faut effacer une ligne pour la remplacer par une autre.

Tous les scénarii commencent au moment où une note est ouverte (TabOpened). Une note ouverte est identifiée par son id unique, le numéro de la table qui a ouvert la note et le nom du serveur qui a ouvert la note.

// module/CoffeeBar/src/CoffeeBar/Event/TabOpened.php
namespace CoffeeBar\Event ;
class TabOpened
{
    protected $id ; // string (guid) 
    protected $tableNumber ; // string (numéro de la table)
    protected $waiter ; // string (nom du serveur)

    // getters & setters
}

Pour qu'une note soit ouverte, il nous faut également l'objet qui fait l'action d'ouvrir cette note. Le tutoriel d'origine parle de commande (le fait de faire quelquechose), mais en français, il y a trop de sens au mot commande (surtout dans le cadre d'un commerce), je parlerais donc d'une opération (le mot action ayant également un sens dans une architecture MVC). L'opération correspondante qui ouvre une note sera donc 'OpenTab'

// module/CoffeeBar/src/CoffeeBar/Command/OpenTab.php
namespace CoffeeBar\Command ;
class OpenTab
{
    protected $id ; // string (guid) 
    protected $tableNumber ; // string (numéro de la table)
    protected $waiter ; // string (nom du serveur)
    // l’objet ‘OpenTab’ déclenche une opération (événement) ‘openTab’

    // getters & setters
}

Le gestionnaire d'événement (Event Manager)

En terme de développement, l'objet 'OpenTab' va déclencher un événement 'openTab' qui sera intercepté et qui génèrera l'événement 'tabOpened'.

Dès qu'on parle d'événements, on va devoir mettre en place un gestionnaire d'événement (http://framework.zend.com/manual/current/en/modules/zend.event-manager.event-manager.html) . Par défaut, l'application de Zend Framework 2 (raccourci honteux : je parle bien entendu du Application Skeletton qui se base sur le framework de Zend Framework 2. Zend Framework 2 n'est pas une application à lui seul) comprend un gestionnaire d'événement par défaut, anonyme. Pour notre usage, nous allons donc créer un gestionnaire d'événement personnalisé, basé sur le gestionnaire de Zend.

// module/CoffeeBar/src/CoffeeBar/Service/TabEventManager.php
<?php
namespace CoffeeBar\Service ;
use Zend\EventManager\EventManager;

class TabEventManager extends EventManager
{
}

Voila. Tout simplement. Franchement, à part lui donner un nom, on n'a rien fait d'autre.

Par contre, on va l'ajouter dans notre gestionnaire de services (Service Manager)

// module/CoffeeBar/Module.php
<?php
namespace CoffeeBar;
class Module implements FormElementProviderInterface
{
...
    public function getServiceConfig()
    {
        return array(
            'invokables' => array(
                'TabEventManager' => 'CoffeeBar\Service\TabEventManager',
            ),
        ) ;
    }
}

Le gestionnaire d'événement a une méthode trigger('nom_de_l_evenement', 'cible', 'paramètres'). Lorsque trigger() est appelé, un événement (nom_de_l_evenement) est déclenché.

Le gestionnaire d'événement a une méthode attach('nom_de_l_evenement', 'callback'). Lorsqu'un événement 'nom_de_l_evenement' est déclenché, la méthode 'callback' s'exécute.

Dans tous les cas, il est nécessaire que le gestionnaire d'événement soit présent, ou pour déclencher l'événement, ou pour y répondre.

Déclencher un événement

Voyons maintenant comment notre objet 'CoffeeBar\Command\OpenTab' peut déclencher un événement 'openTab'.

On vient de voir qu'il était nécessaire, pour l'objet 'CoffeeBar\Command\OpenTab' d'intégrer le gestionnaire d'événements pour pouvoir déclencher un événement 'openTab'.

// module/CoffeeBar/src/CoffeeBar/Command/OpenTab.php
namespace CoffeeBar\Command ;
use Zend\EventManager\EventManagerAwareInterface;
use Zend\EventManager\EventManagerInterface;
// OpenTab déclenche un événement. Il faut donc que l’objet puisse avoir 
// accès à un Event Manager pour y déclencher l’événement
class OpenTab implements EventManagerAwareInterface 
{
    // propriété liées à l’interface EventManagerAwareInterface
    protected $events ;

    // méthode définie par l’interface EventManagerAwareInterface
    // on va injecter le gestionnaire d'événement dans la méthode setEventManager
    public function setEventManager(EventManagerInterface $events)
    {
        $this->events = $events;
        return $this;
    }
     
    // méthode définie par l’interface EventManagerAwareInterface
    public function getEventManager()
    {
        return $this->events;
    }
}

Une fois que l'objet OpenTab a un objet EventManager, on va pouvoir déclencher l'événement. 

On pourrait utiliser une méthode 'triggerMe' qui déclencherait l'événement, mais on serait alors obligé de l'invoquer. 

Pour ma part, je souhaitais, autant que possible, que si l'objet était instancié, l'événement serait déclenché -> dans le constructeur alors ? Avec le Service Manager, toutefois, ce n'est pas possible puisqu'on construit tous nos objets dans le service Manager et on y fait appel après coup... 

Finalement, comme l'objet OpenTab sera véritablement défini après que le formulaire d'ouverture de note sera validé, il fallait déclencher l'événement une fois que les propriétés de l'objet OpenTab étaient définies par le formulaire : hydrator. Parmi les hydrators disponibles dans Zend Framework 2 (http://framework.zend.com/manual/current/en/modules/zend.stdlib.hydrator.html), seul l'hydrator ArraySerializable implemente des méthodes obligatoires. Les autres hydrators utilisent les propriétés et/ou les getters / setters de l'objet.

Voyons comment on applique cela

// module/CoffeeBar/src/CoffeeBar/Command/OpenTab.php
namespace CoffeeBar\Command ;
use Zend\EventManager\EventManagerAwareInterface;
use Zend\EventManager\EventManagerInterface;
// OpenTab déclenche un événement. Il faut donc que l’objet puisse avoir 
// accès à un Event Manager pour y déclencher l’événement
class OpenTab implements EventManagerAwareInterface 
{
    // les autres méthodes

    // la méthode populate() est obligatoire si on veut utiliser l’hydrator ArraySerializable()
    // Or l’hydrator ArraySerializable est le seul hydrator exposé par Zend Framework qui permet
    // d’hydrater un objet avec une fonction personnalisée
    // Nous avons besoin de la fonction personnalisée pour déclencher l’événement au moment
    // où on hydrate l’objet...
    public function populate($data = array()) 
    {
        $this->id = (isset($data['id'])) ? $data['id'] : null;
        $this->tableNumber = (isset($data['tableNumber'])) ? $data['tableNumber'] : null;
        $this->waiter = (isset($data['waiter'])) ? $data['waiter'] : null; 
        $this->events->trigger('openTab', '', array('openTab' => $this)) ;
    }

    // la méthode getArrayCopy() est obligatoire pour l’hydrator ArraySerializable()
    public function getArrayCopy() {
        return array(
            'id' => $this->id, 
            'tableNumber' => $this->tableNumber, 
            'waiter' => $this->waiter,
                ) ;
    }
}

Voyons comment on organise tout ça dans notre gestionnaire de service 

// module/CoffeeBar/Module.php
<?php
namespace CoffeeBar;
use CoffeeBar\Command\OpenTab;
use Zend\Stdlib\Hydrator\ArraySerializable;
class Module
{
    public function getConfig() {...}

    public function getAutoloaderConfig() {...}
   
    // on charge le Service Manager
    public function getServiceConfig()
    {
        return array(
            'factories' => array(
                // formulaire OpenTabForm avec l'instruction setObject()
                'OpenTabForm' => function($sm) {
                    // parce que le formulaire OpenTabForm utilise un élément de formulaire personnalisé
                    // il faut utiliser $this->serviceLocator->get('FormElementManager') ;
                    // et utiliser le formulaire à partir du Form Element Manager
                    $formManager = $sm->get('FormElementManager') ;
                    $form = $formManager->get('CoffeeBar\Form\OpenTabForm') ;
                    // OpenTabCommand : clé dans le Service Manager
                    $form->setObject($sm->get('OpenTabCommand')) ;
                    // on peut ajouter l'hydrator directement 
                    // dans le fichier CoffeeBar/Form/OpenTabForm.php
                    $form->setHydrator(new ArraySerializable()) ;
                    return $form ;
                },
                'OpenTabCommand' => function($sm) {
                    $eventsManager = $sm->get('TabEventManager') ;
                    $openTab = new OpenTab() ;
                    // injection du gestionnaire d’événement dans l’objet OpenTab
                    $openTab->setEventManager($eventsManager) ;
                    return $openTab ;
                },
            ),
        ) ;
    }
}

Et enfin le controller, où il faut compléter et traiter le formulaire s'il est valide.

// module/CoffeeBar/src/CoffeeBar/Controller/TabController.php
<?php
namespace CoffeeBar\Controller ;
use Zend\Mvc\Controller\AbstractActionController;
class TabController extends AbstractActionController
{
    public function openAction()
    {
        // récupérer le formulaire dans le ServiceManager
        $form = $this->serviceLocator->get('OpenTabForm') ;
        $request = $this->getRequest() ;

        // si le formulaire a été posté
        if($request->isPost()) {
            // assigné les données du tableau $_POST aux éléments du formulaire
            $form->setData($request->getPost()) ;
            
            // si le formulaire est valide, hydraté l'objet qui est lié au formulaire (OpenTab)
            if($form->isValid()) {
                $openTab = $form->getObject() ;
                // on redirige directement vers la page de prise de commande
                // notez qu'on passe en paramètre le numéro de la table
                return $this->redirect()->toRoute('tab/order', array('id' => $openTab->getTableNumber()));
            } 
        }

        $result['form'] = $form ;
        return array('result' => $result) ;
    }
}

Et voila.
Quand le formulaire sera validé, on va mapper les données du formulaire CoffeeBar\Form\OpenTabForm sur l'objet CoffeeBar\Command\OpenTab. Au moment où on va hydrater notre objet, l'événement 'openTab' va se déclencher.
