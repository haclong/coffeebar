Installer le framework

Pour commencer notre petite application de gestion des commandes d’un petit café, installons d’abord la base 
de l’application. Pour nous, ce sera le socle MVC basé sur le framework Zend Framework 2.

Je tiens à préciser que les autres frameworks tel que Laravel ou Symfony ont les mêmes fonctionnalités. J'écris ce tutorial pour ZF2 parce que je travaille sur ce framework. Je vous invite à le "traduire" dans votre framework favori si vous le souhaitez.

Prérequis

Installer Zend Framework Skeletton Application. (http://framework.zend.com/manual/2.3/en/user-guide/skeleton-
application.html)

Créer un nouveau module CoffeeBar. Je passe rapidement sur cette partie, vous trouverez la documentation sur 
le site de Zend Framework. (http://framework.zend.com/manual/2.3/en/user-guide/modules.html)

Activer le module dans config/application.config.php
Créer le fichier module/CoffeeBar/Module.php avec ce contenu minimal :

<?php

namespace CoffeeBar ;

class Module
{
    public function getAutoloaderConfig()
    {
       return array(
           'Zend\Loader\StandardAutoloader' => array(
               'namespaces' => array(
                   __NAMESPACE__ => __DIR__ . '/src/' . __NAMESPACE__,
               ),
           ),
       ) ;
    }
   
    public function getConfig()
    {
       return include __DIR__ . '/config/module.config.php' ;
    }
}

Créer le fichier module/CoffeeBar/config/module.config.php avec ce contenu minimal :

<?php

return array() ;

Vérifier que le site fonctionne toujours.

Persistence des données

Nous allons avoir besoin d'un espace pour stocker la liste des notes ouvertes. Une couche de "persistence" où nous allons stocker les informations et les extraire.

Parce que l'exercice est sensé être court, nous allons exploiter le cache. D’abord pour nous familiariser avec, et ma foi, pour un petit exercice sans conséquence, je ne vois pas pourquoi on irait s’encombrer avec la couche base de données...

Fort heureusement, même si cela m’a pris un certain temps, voire un temps certain à comprendre un tutoriel trouvé sur le net (http://www.masterzendframework.com/servicemanager/storage-cache-abstract-service-factory-easy-cache-configuration) au sujet du cache dans Zend Framework, une fois que c’est compris, c’est - comme pour le reste - simplissime.

Un cache prédéfini dans le skeletton

L’Application Skeletton de Zend Framework 2 charge déjà un objet abstract factory pour utiliser le cache. Tout ce qui reste à faire, c’est de le paramétrer et de l’utiliser. Le tutoriel de Matthew Setter propose d’utiliser un service Redis, ou à défaut, d’utiliser les ressources de la machine pour le cache. Pour ma part, je découvre, j’opte pour l’utilisation exclusive des ressources de la machine... N’allons pas trop vite...

Il est défini ici :

// module/Application/config/module.config.php
<?php
return array(
   ...
    'service_manager' => array(
        'abstract_factories' => array(
            'Zend\Cache\Service\StorageCacheAbstractServiceFactory',
        ),
    ),
);

Pour le paramétrer, vous pouvez choisir le fichier de configuration de votre préférence. Pour rappel, l'Application admet les fichiers de configuration suivants :

- config/application.config.php (qui sera commité et distribué pour tous)
- config/autoload/(*.)global.php (qui seront commités et distribués pour tous)
- config/autoload/(*.)local.php (qui ne seront pas commités et cachés à tous)
- module/*/config/module.config.php (qui seront commités et distribués pour tous)

Vous pouvez adoptez votre propre organisation, dans vos différents fichiers de configuration. Je vous propose mon point de vue :

- le fichier config/application.config.php ne concerne que le chargement des modules, le path où on peut les trouver ainsi que les fichiers de configuration que l'application doit charger automatiquement. 
- les fichiers module/*/config/module.config.php comprennent les informations récurrentes des modules : les vues, les controllers, les services, les routes, la navigation... autant que possible, conserver les mêmes clés pour ne pas avoir à chercher l'information partout.

Restent enfin les fichiers dans config/autoload/*.php qui peuvent être utilisés pour configurer des éléments ou des modules.

Ici, on va utiliser le fichier global.php parce que mon cache est en local dans le système de fichiers. On n'a rien à cacher...

// config/autoload/global.php
<?php
return array(
    'caches' => array(
        'Cache\Persistence' => array(
            'adapter' => 'filesystem',
            'ttl'     => 86400,
            'options' => array(
        // modifier les droits d’accès si nécessaires
                // mod : 775 - owner : user:www-data
                'cache_dir' => __DIR__ . '/../../data/cache/',
            ),
        ),
    ),
);


