Passer commande, côté web

Voici le second formulaire de notre petite application. 

Ce second formulaire est plus complexe que le précédent. Il va être composé d'un ensemble d'éléments de formulaire (fieldset). L'ensemble est composé d'une liste déroulante (élément du menu) et un champ de texte (nombre commandé). Le formulaire commencera avec deux fois le même ensemble mais ce nombre n'est pas définitif. Il va être possible d'ajouter d'autres ensembles, pour d'autres éléments du menu.

Commençons par nos objets. Là encore, ce sont des objets avec des données en dur mais il est très facile, à partir d'ici, de relier ces objets à une base de données.

Les objets

L'Element de menu

L'élément de menu est composé d'un id (numéro de menu), d'une description, d'un prix et d'un flag si l'élément est une boisson ou pas.

// module/CoffeeBar/src/CoffeeBar/Entity/MenuItem.php
<?php
namespace CoffeeBar\Entity ;
class MenuItem
{
    protected $id ; // int
    protected $description ; // string
    protected $price ; // float
    protected $isDrink ; // bool

    public function __construct($id, $description, $price = 0.00, $isDrink = false)
    {
       $this->setId($id) ;
       $this->setDescription($description) ;
       $this->setPrice($price) ;
       $this->setIsDrink($isDrink) ;
    }
   
    /* définir les getter et setter */
}

La liste des éléments de menu

Evidemment, le menu est composé de plusieurs éléments de menu. Voici la liste d'éléments de menu qu'on va manipuler.

// module/CoffeeBar/src/CoffeeBar/Entity/MenuItems.php
<?php
namespace CoffeeBar\Entity ;
use ArrayObject;
class MenuItems extends ArrayObject
{
    public function __construct(Array $array=null)
    {
       $array = array() ;
       $i = 0 ;
       $array[] = new MenuItem($i++, 'Thé vert', 3.75, true) ;
       $array[] = new MenuItem($i++, 'Café', 2.55, true) ;
       $array[] = new MenuItem($i++, 'Limonade', 4.05, true) ;
       $array[] = new MenuItem($i++, 'Soda', 4.20, true) ;
       $array[] = new MenuItem($i++, 'Bière', 4.75, true) ;
       $array[] = new MenuItem($i++, 'Frites', 5.25) ;
       $array[] = new MenuItem($i++, 'Pizza', 9.80) ;
       $array[] = new MenuItem($i++, 'Saucisses Frites', 7.75) ;
       $array[] = new MenuItem($i++, 'Hot Dog', 7.00) ;
       $array[] = new MenuItem($i++, 'Quiche', 6.65) ;
       parent::__construct($array) ;
    }
   
    // une méthode pour faire un tableau de paire id/value pour chaque objet MenuItem
    public function getSelectValues()
    {
       $array = array() ;
      
       // on accède à l'itérateur des objets ArrayObject avec la méthode getIterator()
       $iterator = $this->getIterator() ;
       foreach($iterator as $item)
       {
           $array[$item->getId()] = $item->getDescription() ;
       }
       return $array ;
    }
}

Les éléments de formulaire

La liste déroulante

Comme pour les serveurs, nous allons injecter l'objet MenuItems dans un elément de formulaire Select personnalisé. Dans l'objet MenuItems, on aura pris soin de développer une petite méthode pour reconstruire le tableau avec les paires id/value attendu en entrée pour un élément de formulaire Select.

// module/CoffeeBar/src/CoffeeBar/Form/MenuSelect
<?php
namespace CoffeeBar\Form ;
use CoffeeBar\Entity\MenuItems;
use Zend\Form\Element\Select;
class MenuSelect extends Select
{
    protected $menus ;
   
    // injecter l'objet MenuItems dans le constructeur
    public function __construct(MenuItems $items)
    {
       $this->menus = $items ;
    }

    // assigner le tableau avec les paires id/value
    public function init()
    {
       $this->setValueOptions($this->menus->getSelectValues()) ;
    }
}

Le Fieldset

L'ensemble des éléments de formulaire (la liste déroulante et le champ texte)

// module/CoffeeBar/src/CoffeeBar/Form/MenuItemFieldset
<?php
namespace CoffeeBar\Form ;
use Zend\Form\Fieldset;
class MenuItemFieldset extends Fieldset
{
    public function init()
    {
        $this->add(array(
            'name' => 'id',
            'type' => 'MenuSelect', // utiliser la clé qui est dans le manager de formulaire
            'attributes' => array(
                'class' => 'form-control',
            ),
        )) ;
    }

    public function __construct()
    {
        parent::__construct('menuItems') ;
        
        $this->add(array(
            'name' => 'number',
            'options' => array(
                'label' => ' ',
            ),
            'attributes' => array(
                'value' => 1,
                'class' => 'form-control text-right',
                'size' => 4,
            ),
        )) ;
    }
}

Le Formulaire

Enfin, on va tout remettre ensemble, sans oublier qu'on doit ajouter les options qui vont bien pour multiplier plus de fieldset au fur et à mesure.

// module/CoffeeBar/src/CoffeeBar/Form/PlaceOrderForm
<?php
namespace CoffeeBar\Form ;
use CoffeeBar\Entity\TabStory\OrderModel; // on va en reparler
use Zend\Form\Element\Csrf;
use Zend\Form\Form;
use Zend\Stdlib\Hydrator\ArraySerializable;
class PlaceOrderForm extends Form
{
    public function init()
    {
        $this->add(array(
            // c'est un élément du framework. Il permet de faire des champs qui peuvent s'incrémenter dynamiquement
            'type' => 'Zend\Form\Element\Collection',
            'name' => 'items',
            'options' => array(
                'label' => 'Commandez vos plats',
                // nombre d'éléments par défaut à l'ouverture du formulaire
                'count' => 2,
                // les deux options suivantes permettent d'ajouter autant de champs qu'on souhaite
                'should_create_template' => true,
                'allow_add' => true,
                // cette option indique quel est l'élément à utiliser
                'target_element' => array(
                    // chemin du vrai objet, pas un alias dans le Service Manager
                    'type' => 'CoffeeBar\Form\MenuItemFieldset', 
                ),
            ),
            'attributes' => array(
                'class' => 'form-control',
            ),
        ));
    }
    public function __construct()
    {
        parent::__construct('order') ;
        
        $this->setAttribute('method', 'post')
             ->setHydrator(new ArraySerializable())
             ->setObject(new OrderModel) ;
        
        // numéro de la table
        $this->add(array(
            'name' => 'id',
            'type' => 'hidden',
        )) ;
        
        $this->add(new Csrf('security')) ;
        
        $this->add(array(
            'name' => 'submit',
            'type' => 'Submit',
            'attributes' => array(
                'value' => 'Place order',
                'class' => 'btn btn-default',
            ),
        )) ;
    }
}

Le formulaire PlaceOrderForm est lié à un nouvel objet : OrderModel. En fait, comme au moment où on soumet le formulaire, on ne sait pas encore si ce sont des boissons, des plats ou les deux qui sont commandés, on utilise un objet intermédiaire qu'on retraitera par la suite pour déclencher les événements et assigner les boissons et les plats...

// module/CoffeeBar/src/CoffeeBar/Entity/TabStory/OrderModel.php
<?php
namespace CoffeeBar\Entity\TabStory ;
class OrderModel
{
    protected $id ; // int - numéro de la table
    protected $items ; // array - tableau d'OrderItem

    // méthode obligatoire si on veut utiliser l'hydrator ArraySerializable
    public function populate($data = array()) {
        isset($data['id']) ? $this->setId($data['id']) : null;
        isset($data['items']) ? $this->setItems($data['items']) : null;
    }
    
    // méthode obligatoire si on veut utiliser l'hydrator ArraySerializable
    public function getArrayCopy() {
        return array(
            'id' => $this->id, 
            'items' => $this->items, 
                ) ;
    }
}

Service Manager

Charger tous les éléments dans le Service manager

// module/CoffeeBar/Module.php
namespace CoffeeBar;
class Module implements FormElementProviderInterface
{
    // l'interface FormElementProvideInterface a la méthode getFormElementConfig()
    public function getFormElementConfig() {
        return array(
            'factories' => array(
                // déclarer l'élément de formulaire dans le Manager de formulaire
                'MenuSelect' => function($sm) {
                    $serviceLocator = $sm->getServiceLocator() ;
                    // CoffeeBarEntity\MenuItems : clé dans le Service Manager
                    $menus = $serviceLocator->get('CoffeeBarEntity\MenuItems') ;
                    // MenuSelect : objet CoffeeBar\Form\MenuSelect
                    $select = new MenuSelect($menus) ;
                    return $select ;
                },
            ),
        );
    }

    // on charge le service manager
    public function getServiceConfig()
    {
        return array(
            'invokables' => array(
                'CoffeeBarEntity\MenuItems' => 'CoffeeBar\Entity\MenuItems',
            ),
            'factories' => array(
                'PlaceOrderForm' => function($sm) {
                    $formManager = $sm->get('FormElementManager') ;
                    $form = $formManager->get('CoffeeBar\Form\PlaceOrderForm') ;
                    return $form ;
                },
            ),
        ) ;
    }
}

Le Controleur

Mettons tout en place dans le controleur

// module/CoffeeBar/src/CoffeeBar/Controller/TabController.php
<?php
namespace CoffeeBar\Controller ;
use CoffeeBar\Entity\TabStory\OrderModel;
use Zend\Mvc\Controller\AbstractActionController;
class TabController extends AbstractActionController
{
    public function orderAction()
    {
        // utiliser la clé déclarée dans le Service Manager (classe Module)
        $form = $this->serviceLocator->get('PlaceOrderForm') ;
        $request = $this->getRequest() ;

        // vérifier si on connait le numéro de la table pour laquelle on passe commande
        if ($id = (int) $this->params()->fromRoute('id')) {
            $form->get('id')->setValue($id) ;
        // sinon, vérifier si le formulaire a été posté
        } elseif($request->isPost()) {
            $form->setData($request->getPost()) ;
            if($form->isValid()) {
                // traitement de la commande
            }
        // si on ne sait pas pour quelle table on va passer commande, retourner à la page 'Ouvrir une commande'
        } else {
            return $this->redirect()->toRoute('tab/open');
        }
        
        $result['form'] = $form ;
        return array('result' => $result) ;
    }
}

Aide de vue pour le formulaire

Avant de voir comment on traite la commande, je vais m'attarder sur l'aide de vue.
En effet, l'ensemble d'éléments de formulaire ne représente qu'un seul élément du formulaire PlaceOrderForm, il n'y a pas d'aide de vue dédié. Il faut créer le notre.

// module/CoffeeBar/src/CoffeeBar/Form/Helper/MenuItemFormCollection.php
<?php
namespace CoffeeBar\Form\Helper ;
use Zend\Form\View\Helper\FormCollection ;
use Zend\Form\Element\Collection ;
class MenuItemFormCollection extends FormCollection
{
    public function renderTemplate(Collection $collection)
    {
        $elementHelper          = $this->getElementHelper();
        $escapeHtmlAttribHelper = $this->getEscapeHtmlAttrHelper();
        $fieldsetHelper         = $this->getFieldsetHelper();
        $element                = $collection->getTemplateElement();
        
        if ($element instanceof FieldsetInterface) {
            $templateMarkup .= $fieldsetHelper($element);
        }

        $formRow          = $this->view->plugin('FormRow') ;

        $templateMarkup   = '';
        $templateMarkup  .= '<fieldset class="form-inline">' ;
        $templateMarkup  .= $formRow($element->get('id')) . '&nbsp;&nbsp;';
        $templateMarkup  .= $formRow($element->get('number')) ;
        $templateMarkup  .= '</fieldset>' ;

        return sprintf(
            $this->templateWrapper,
            $escapeHtmlAttribHelper($templateMarkup)
        );
    }
}

Il faut déclarer la nouvelle aide de vue, cette fois, dans la clé 'view_helpers' dans la configuration du module

// module/CoffeeBar/config/module.config.php
<?
return array(
    'view_helpers' => array(
        'invokables' => array(
          //  comme d’habitude : la clé => l’objet
            'MenuItemFormCollection' => 'CoffeeBar\Form\Helper\MenuItemFormCollection',
        ),
    ),
);

Et enfin la vue définitive. N'oubliez pas le code javascript qui va nous permettre d'ajouter autant d'éléments qu'on veut.

// module/CoffeeBar/view/coffee-bar/tab/order.phtml
 <script>
     function add_item() {
         var currentCount = $('form fieldset fieldset').length;
         var template = $('form fieldset > span').data('template');
         template = template.replace(/__index__/g, currentCount);
         $('form fieldset').last().append(template);

         return false;
     }
 </script>

<h1>Passer commande</h1>

<?php
$form = $this->result['form'] ;
$form->prepare() ;

$form->setAttribute('action',  $this->url('tab/order')) ;
$form->setAttribute('method', 'post') ;

?>

<?php  echo $this->form()->openTag($form) ; ?>
<div class='form-group'>
<?php  echo $this->formRow($form->get('id')) ; ?>
</div>
<div class='form-group'>
    <fieldset>
        <legend><?php $this->formLabel($form->get('items')) ; ?></legend>
<?php
    foreach($form->get('items')->getIterator() as $fieldset)
    {
        echo '<fieldset class="form-inline">' ;
        echo $this->formRow($fieldset->get('id')). '&nbsp;&nbsp;' ;
        echo $this->formRow($fieldset->get('number')) ;
        echo '</fieldset>' ;
    }
// Et voici notre aide de vue
    echo $this->MenuItemFormCollection()->renderTemplate($form->get('items'));
?>
    </fieldset>
<button onclick="return add_item()">Add a new item</button>
</div>
    <?php
echo $this->formRow($form->get('security')) ;
echo $this->formRow($form->get('submit')) ;
echo $this->form()->closeTag() ;
?>

Voyons maintenant comment on traite notre commande